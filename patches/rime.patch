diff --git a/CMakeLists.txt b/CMakeLists.txt
index e96508c..cad8fea 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -17,9 +17,13 @@ find_package(Pthread REQUIRED)
 
 if (NOT DEFINED RIME_TARGET)
     pkg_check_modules(Rime REQUIRED IMPORTED_TARGET "rime>=1.0.0")
-    set(RIME_TARGET PkgConfig::Rime)
+    add_definitions(-I "/tmp/fcitx5/include")
+    set(RIME_TARGET $<LINK_LIBRARY:WHOLE_ARCHIVE,"/tmp/fcitx5/lib/librime.a"> "-L/tmp/fcitx5/lib" leveldb yaml-cpp marisa opencc glog lua)
 endif()
 
+if ("${Rime_VERSION}" VERSION_LESS "1.10.0")
+    add_definitions(-DFCITX_RIME_NO_HIGHLIGHT_CANDIDATE)
+endif()
 if ("${Rime_VERSION}" VERSION_LESS "1.8.0")
     add_definitions(-DFCITX_RIME_NO_DELETE_CANDIDATE)
 endif()
diff --git a/src/rimecandidate.cpp b/src/rimecandidate.cpp
index fc84a03..79c461d 100644
--- a/src/rimecandidate.cpp
+++ b/src/rimecandidate.cpp
@@ -75,6 +75,9 @@ RimeCandidateList::RimeCandidateList(RimeEngine *engine, InputContext *ic,
     setPageable(this);
     setBulk(this);
     setActionable(this);
+#ifndef FCITX_RIME_NO_HIGHLIGHT_CANDIDATE
+    setBulkCursor(this);
+#endif
 
     const auto &menu = context.menu;
 
@@ -187,4 +190,19 @@ void RimeCandidateList::triggerAction(const CandidateWord &candidate, int id) {
         }
     }
 }
+
+#ifndef FCITX_RIME_NO_HIGHLIGHT_CANDIDATE
+int RimeCandidateList::globalCursorIndex() const {
+    return -1; // No API available.
+}
+
+void RimeCandidateList::setGlobalCursorIndex(int index) {
+    auto session = engine_->state(ic_)->session(false);
+    if (!session) {
+        throw std::invalid_argument("Invalid session");
+    }
+    auto *api = engine_->api();
+    api->highlight_candidate(session, index);
+}
+#endif
 } // namespace fcitx
diff --git a/src/rimecandidate.h b/src/rimecandidate.h
index 6c96898..a52b87a 100644
--- a/src/rimecandidate.h
+++ b/src/rimecandidate.h
@@ -52,6 +52,10 @@ class RimeCandidateList final : public CandidateList,
     ,
                                 public BulkCandidateList
 #endif
+#ifndef FCITX_RIME_NO_HIGHLIGHT_CANDIDATE
+    ,
+                                public BulkCursorCandidateList
+#endif
 {
 public:
     RimeCandidateList(RimeEngine *engine, InputContext *ic,
@@ -94,6 +98,11 @@ public:
     int totalSize() const override;
 #endif
 
+#ifndef FCITX_RIME_NO_HIGHLIGHT_CANDIDATE
+    int globalCursorIndex() const override;
+    void setGlobalCursorIndex(int index) override;
+#endif
+
     bool hasAction(const CandidateWord &candidate) const override;
     std::vector<CandidateAction>
     candidateActions(const CandidateWord &candidate) const override;
diff --git a/src/rimeengine.cpp b/src/rimeengine.cpp
index 68c2044..090ee37 100644
--- a/src/rimeengine.cpp
+++ b/src/rimeengine.cpp
@@ -482,11 +482,22 @@ void RimeEngine::activate(const InputMethodEntry & /*entry*/,
 
 void RimeEngine::deactivate(const InputMethodEntry &entry,
                             InputContextEvent &event) {
-    if (event.type() == EventType::InputContextSwitchInputMethod &&
-        *config_.commitWhenDeactivate) {
+    if (event.type() == EventType::InputContextSwitchInputMethod) {
         auto *inputContext = event.inputContext();
         auto *state = this->state(inputContext);
-        state->commitPreedit(inputContext);
+        switch (*config_.switchInputMethodBehavior) {
+        case SwitchInputMethodBehavior::Clear:
+            break;
+        case SwitchInputMethodBehavior::CommitRawInput:
+            state->commitInput(inputContext);
+            break;
+        case SwitchInputMethodBehavior::CommitComposingText:
+            state->commitComposing(inputContext);
+            break;
+        case SwitchInputMethodBehavior::CommitCommitPreview:
+            state->commitPreedit(inputContext);
+            break;
+        }
     }
     reset(entry, event);
 }
diff --git a/src/rimeengine.h b/src/rimeengine.h
index 3ecc012..6bec003 100644
--- a/src/rimeengine.h
+++ b/src/rimeengine.h
@@ -63,6 +63,18 @@ enum class PreeditMode { No, ComposingText, CommitPreview };
 FCITX_CONFIG_ENUM_NAME_WITH_I18N(PreeditMode, N_("Do not show"),
                                  N_("Composing text"), N_("Commit preview"))
 
+enum class SwitchInputMethodBehavior {
+    Clear,
+    CommitRawInput,
+    CommitComposingText,
+    CommitCommitPreview
+};
+
+FCITX_CONFIG_ENUM_NAME_WITH_I18N(SwitchInputMethodBehavior, N_("Clear"),
+                                 N_("Commit raw input"),
+                                 N_("Commit composing text"),
+                                 N_("Commit commit preview"))
+
 FCITX_CONFIGURATION(
     RimeEngineConfig,
     OptionWithAnnotation<PreeditMode, PreeditModeI18NAnnotation> preeditMode{
@@ -78,9 +90,12 @@ FCITX_CONFIGURATION(
         this, "PreeditCursorPositionAtBeginning",
         _("Fix embedded preedit cursor at the beginning of the preedit"),
         !isAndroid() && !isApple()};
-    Option<bool> commitWhenDeactivate{
-        this, "Commit when deactivate",
-        _("Commit current text when deactivating"), true};
+    OptionWithAnnotation<SwitchInputMethodBehavior,
+                         SwitchInputMethodBehaviorI18NAnnotation>
+        switchInputMethodBehavior{
+            this, "SwitchInputMethodBehavior",
+            _("Action when switching input method"),
+            SwitchInputMethodBehavior::CommitCommitPreview};
     ExternalOption userDataDir{
         this, "UserDataDir", _("User data dir"),
         stringutils::concat(
diff --git a/src/rimestate.cpp b/src/rimestate.cpp
index a8fe4b9..5dbc18f 100644
--- a/src/rimestate.cpp
+++ b/src/rimestate.cpp
@@ -11,6 +11,7 @@
 #include "rimesession.h"
 #include <algorithm>
 #include <cstdint>
+#include <cstring>
 #include <fcitx-utils/capabilityflags.h>
 #include <fcitx-utils/i18n.h>
 #include <fcitx-utils/key.h>
@@ -79,7 +80,12 @@ void RimeState::clear() {
     }
 }
 
-void RimeState::activate() { maybeSyncProgramNameToSession(); }
+void RimeState::activate() {
+    maybeSyncProgramNameToSession();
+    if (session_) {
+        engine_->api()->set_option(session_->id(), "_linear", true);
+    }
+}
 
 std::string RimeState::subMode() {
     std::string result;
@@ -440,6 +446,30 @@ void RimeState::updateUI(InputContext *ic, bool keyRelease) {
 
 void RimeState::release() { session_.reset(); }
 
+void RimeState::commitInput(InputContext *ic) {
+    if (auto *api = engine_->api()) {
+        if (auto input = api->get_input(this->session())) {
+            if (std::strlen(input) > 0) {
+                ic->commitString(input);
+            }
+        }
+    }
+}
+
+void RimeState::commitComposing(InputContext *ic) {
+    if (auto *api = engine_->api()) {
+        RIME_STRUCT(RimeContext, context);
+        auto session = this->session();
+        if (!api->get_context(session, &context)) {
+            return;
+        }
+        if (context.composition.length > 0) {
+            ic->commitString(context.composition.preedit);
+        }
+        api->free_context(&context);
+    }
+}
+
 void RimeState::commitPreedit(InputContext *ic) {
     if (auto *api = engine_->api()) {
         RIME_STRUCT(RimeContext, context);
diff --git a/src/rimestate.h b/src/rimestate.h
index 07a73e1..6b2a1dc 100644
--- a/src/rimestate.h
+++ b/src/rimestate.h
@@ -43,6 +43,8 @@ public:
     void updatePreedit(InputContext *ic, const RimeContext &context);
     void updateUI(InputContext *ic, bool keyRelease);
     void release();
+    void commitInput(InputContext *ic);
+    void commitComposing(InputContext *ic);
     void commitPreedit(InputContext *ic);
     std::string subMode();
     std::string subModeLabel();
